import { NextResponse } from "next/server"
import { contactsStore } from "../telegram-contact/route"

export async function POST(request: Request) {
  try {
    const data = await request.json()
    console.log("üü° Check Auth: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:", data)

    const { telegramId } = data

    if (!telegramId) {
      console.log("üü° Check Auth: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegramId –≤ –∑–∞–ø—Ä–æ—Å–µ")
      return NextResponse.json({ error: "Telegram ID is required" }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const contactData = contactsStore[telegramId]
    console.log("üü° Check Auth: –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ store:", contactData)
    console.log("üü° Check Auth: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ store:", contactsStore)

    if (!contactData) {
      console.log("üü° Check Auth: –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è telegramId:", telegramId)
      return NextResponse.json({
        authenticated: false,
        message: "Contact not found",
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –∫–ª–∏–Ω–∏–∫–∏
    try {
      console.log("üü° Check Auth: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", contactData.phoneNumber)

      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const mockResponse = {
        exists: true,
        hasMultipleProfiles: true,
        profiles: [
          {
            id: "1",
            fullName: "–ê–Ω—Ç–æ–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π –Æ—Ä—å–µ–≤–∏—á",
            firstName: "–ê–ª–µ–∫—Å–µ–π",
            patronymic: "–Æ—Ä—å–µ–≤–∏—á",
            lastName: "–ê–Ω—Ç–æ–Ω–æ–≤",
            birthDate: "10/10/1988",
            age: 36,
            phone: contactData.phoneNumber,
          },
          {
            id: "2",
            fullName: "–ê–Ω—Ç–æ–Ω–æ–≤ –Æ—Ä–∏–π –ê–Ω–∞—Ç–æ–ª—å–µ–≤–∏—á",
            firstName: "–Æ—Ä–∏–π",
            patronymic: "–ê–Ω–∞—Ç–æ–ª—å–µ–≤–∏—á",
            lastName: "–ê–Ω—Ç–æ–Ω–æ–≤",
            birthDate: "12/03/1949",
            age: 76,
            phone: contactData.phoneNumber,
          },
        ],
      }

      console.log("üü° Check Auth: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:", {
        authenticated: true,
        phoneNumber: contactData.phoneNumber,
        ...mockResponse,
      })

      return NextResponse.json({
        authenticated: true,
        phoneNumber: contactData.phoneNumber,
        ...mockResponse,
      })
    } catch (error) {
      console.error("üî¥ Check Auth: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", error)
      return NextResponse.json({
        authenticated: false,
        error: "Failed to check phone number",
      })
    }
  } catch (error) {
    console.error("üî¥ Check Auth: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error)
    return NextResponse.json({ error: "Failed to check authentication status" }, { status: 500 })
  }
}

