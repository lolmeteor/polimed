import { NextResponse } from "next/server"
import { contactsStore } from "../telegram-contact/route"
import hubServiceClient from "@/services/hub-service-client"

export async function POST(request: Request) {
  try {
    const data = await request.json()
    console.log("üü° Check Auth: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:", data)

    const { telegramId } = data

    if (!telegramId) {
      console.log("üü° Check Auth: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegramId –≤ –∑–∞–ø—Ä–æ—Å–µ")
      return NextResponse.json({ error: "Telegram ID is required" }, { status: 400 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const contactData = contactsStore[telegramId]
    console.log("üü° Check Auth: –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ store:", contactData)
    console.log("üü° Check Auth: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ store:", contactsStore)

    if (!contactData || !contactData.phoneNumber) {
      console.log("üü° Check Auth: –ö–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è telegramId:", telegramId)
      return NextResponse.json({
        authenticated: false,
        message: "Contact not found",
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –∫–ª–∏–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ –ú–ò–° API
    try {
      console.log("üü° Check Auth: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ú–ò–°:", contactData.phoneNumber)
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—É–±–∏—Ä–∞–µ–º +7 –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å)
      const formattedPhone = contactData.phoneNumber.replace(/^\+7/, '');
      
      // –ò—â–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ú–ò–°
      const searchResult = await hubServiceClient.searchTop10Patient({
        cellPhone: formattedPhone
      });
      
      if (!searchResult.success || !searchResult.data) {
        console.log("üü° Check Auth: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –ú–ò–° –∏–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:", searchResult.error);
        return NextResponse.json({
          authenticated: false,
          message: "User not found in MIS",
        });
      }
      
      console.log("üü° Check Auth: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ –ú–ò–°:", searchResult.data);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ú–ò–° –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      const profiles = Array.isArray(searchResult.data) 
        ? searchResult.data.map(patient => ({
            id: patient.IdPat || String(Math.random()), // –∏—Å–ø–æ–ª—å–∑—É–µ–º IdPat –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ID
            fullName: `${patient.LastName} ${patient.FirstName} ${patient.SecondName || ''}`.trim(),
            firstName: patient.FirstName || '',
            patronymic: patient.SecondName || '',
            lastName: patient.LastName || '',
            birthDate: patient.BirthDate || '',
            age: calculateAge(patient.BirthDate),
            phone: contactData.phoneNumber,
          }))
        : [];
      
      const hasProfiles = profiles.length > 0;
      
      console.log("üü° Check Auth: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:", profiles);
      console.log("üü° Check Auth: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç:", {
        authenticated: hasProfiles,
        phoneNumber: contactData.phoneNumber,
        exists: hasProfiles,
        hasMultipleProfiles: profiles.length > 1,
        profiles,
      });

      return NextResponse.json({
        authenticated: hasProfiles,
        phoneNumber: contactData.phoneNumber,
        exists: hasProfiles,
        hasMultipleProfiles: profiles.length > 1,
        profiles,
      });
    } catch (error) {
      console.error("üî¥ Check Auth: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ú–ò–°:", error)
      return NextResponse.json({
        authenticated: false,
        error: "Failed to check phone number in MIS",
      })
    }
  } catch (error) {
    console.error("üî¥ Check Auth: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error)
    return NextResponse.json({ error: "Failed to check authentication status" }, { status: 500 })
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
function calculateAge(birthDate: string): number {
  if (!birthDate) return 0;
  
  try {
    // –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞—Ç—É –∫ —Ñ–æ—Ä–º–∞—Ç—É Date
    const dob = new Date(birthDate);
    const today = new Date();
    
    let age = today.getFullYear() - dob.getFullYear();
    const monthDiff = today.getMonth() - dob.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < dob.getDate())) {
      age--;
    }
    
    return age;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–∞:", error);
    return 0;
  }
}

