import { NextRequest, NextResponse } from 'next/server';
import { contactsStore } from '../telegram-contact/route';
import { MisApiService } from '@/services/mis-api-service';

// –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ—Ç —Ä–æ—É—Ç –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π Node.js runtime
export const runtime = 'nodejs';

/**
 * API —Ä–æ—É—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 * –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ä–æ—É—Ç —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏!
 */
export async function POST(request: Request) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const data = await request.json();
    const { phoneNumber, firstName, lastName, telegramId } = data;
    
    if (!phoneNumber || !firstName || !telegramId) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —É–∫–∞–∑–∞–Ω—ã'
      }, { status: 400 });
    }
    
    // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    const now = new Date();
    const timestamp = now.toISOString();
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const formattedPhone = phoneNumber.startsWith('+') 
      ? phoneNumber 
      : `+${phoneNumber}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –ú–ò–°
    let patientFound = false;
    let patientInfo = null;
    
    try {
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –ú–ò–°
      const phoneFormats = [];
      phoneFormats.push(formattedPhone);
      
      // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
      const digits = formattedPhone.replace(/\D/g, '');
      phoneFormats.push(digits);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –∫–æ–¥–∞–º–∏
      if (digits.length === 10) {
        phoneFormats.push(`+7${digits}`);
        phoneFormats.push(`8${digits}`);
      } else if (digits.length === 11) {
        if (digits.startsWith('8')) {
          phoneFormats.push(`+7${digits.substring(1)}`);
        } else if (digits.startsWith('7')) {
          phoneFormats.push(`+7${digits.substring(1)}`);
          phoneFormats.push(`8${digits.substring(1)}`);
        }
      }
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      for (const format of phoneFormats) {
        try {
          const searchResult = await MisApiService.searchPatient({
            Phone: format
          });
          
          if (searchResult.Success && searchResult.Patients?.Patient) {
            patientFound = true;
            patientInfo = searchResult.Patients.Patient;
            console.log(`üü¢ Auth Debug: –ù–∞–π–¥–µ–Ω –ø–∞—Ü–∏–µ–Ω—Ç –≤ –ú–ò–° —Å –Ω–æ–º–µ—Ä–æ–º ${format}:`, searchResult);
            break;
          }
        } catch (error) {
          console.error(`üî¥ Auth Debug: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ ${format}:`, error);
        }
      }
    } catch (error) {
      console.error('üî¥ Auth Debug: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –ú–ò–°:', error);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    contactsStore[telegramId] = {
      telegramId: parseInt(telegramId),
      phoneNumber: formattedPhone,
      firstName,
      lastName: lastName || undefined,
      contactUserId: parseInt(telegramId),
      storedAt: timestamp
    };
    
    console.log(`üîµ Auth Debug: –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${firstName} ${lastName || ''}:`, contactsStore[telegramId]);
    
    return NextResponse.json({
      success: true,
      patientFound,
      patientInfo: patientFound ? patientInfo : null,
      contactInfo: {
        telegramId,
        phoneNumber: formattedPhone,
        firstName,
        lastName: lastName || undefined,
        storedAt: timestamp
      }
    });
  } catch (error: any) {
    console.error('üî¥ Auth Debug: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
    
    return NextResponse.json({
      success: false,
      error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
} 