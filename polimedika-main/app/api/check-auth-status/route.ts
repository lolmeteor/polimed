import { NextResponse } from "next/server"
import { contactsStore } from "../telegram-contact/route"
import * as soap from 'soap'
import { parseStringPromise } from 'xml2js'

// SOAP –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const WSDL_URL = process.env.MIS_WSDL_URL!
const MIS_GUID = process.env.MIS_GUID!
const DEFAULT_LPU_ID = process.env.DEFAULT_LPU_ID!
const SOAP_METHOD_CHECK_PATIENT = 'IHubService_CheckPatient'
const SOAP_NAMESPACE = 'http://tempuri.org/'

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
 */
export async function POST(request: Request) {
  try {
    const data = await request.json()
    console.log("üü° Check Auth: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:", data)

    const { telegramId } = data

    if (!telegramId) {
      console.log("üü° Check Auth: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegramId –≤ –∑–∞–ø—Ä–æ—Å–µ")
      return NextResponse.json({ error: "Telegram ID is required" }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const contactData = contactsStore[telegramId]
    console.log("üü° Check Auth: –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ store:", contactData)

    if (!contactData || !contactData.phoneNumber) {
      console.log("üü° Check Auth: –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è telegramId:", telegramId)
      return NextResponse.json({
        authenticated: false,
        message: "Contact not found",
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (!WSDL_URL || !MIS_GUID || !DEFAULT_LPU_ID) {
      console.error("üî¥ Check Auth: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–ò–°")
      return NextResponse.json(
        { 
          authenticated: false, 
          error: "MIS configuration is not set" 
        }, 
        { status: 500 }
      )
    }

    try {
      // –í—ã–∑—ã–≤–∞–µ–º SOAP API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
      console.log("üü° Check Auth: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ú–ò–°:", contactData.phoneNumber)
      
      // –°–æ–∑–¥–∞–µ–º SOAP –∫–ª–∏–µ–Ω—Ç
      const client = await soap.createClientAsync(WSDL_URL, { 
        namespaceArrayElements: false 
      })
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —É–±–∏—Ä–∞–µ–º +7, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
      const phoneFormatted = contactData.phoneNumber.replace(/\+7/, '').replace(/\D/g, '')
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è SOAP –∑–∞–ø—Ä–æ—Å–∞
      const args = {
        InputMessage: {
          PhoneNumber: phoneFormatted,
          TelegramId: telegramId.toString(),
          Guid: MIS_GUID,
          DefaultLpuId: parseInt(DEFAULT_LPU_ID, 10)
        }
      }

      console.log("ÔøΩÔøΩ Check Auth: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SOAP –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:", args)
      
      try {
        // –í—ã–ø–æ–ª–Ω—è–µ–º SOAP –∑–∞–ø—Ä–æ—Å
        const [rawResult] = await client[`${SOAP_METHOD_CHECK_PATIENT}Async`](args)
        
        // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ XML
        const jsonResult = typeof rawResult === 'string'
          ? await parseStringPromise(rawResult)
          : rawResult
        
        console.log("üü° Check Auth: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ú–ò–°:", jsonResult)
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ú–ò–°
        const authenticated = Boolean(jsonResult?.CheckPatientResponse?.Authenticated?.[0] === 'true')
        const phoneNumber = contactData.phoneNumber
        
        // –ü–∞—Ä—Å–∏–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        let profiles = []
        try {
          if (jsonResult?.CheckPatientResponse?.Profiles?.[0]?.Profile) {
            profiles = jsonResult.CheckPatientResponse.Profiles[0].Profile.map((profile: any) => ({
              id: profile.Id?.[0] || '',
              fullName: `${profile.LastName?.[0] || ''} ${profile.FirstName?.[0] || ''} ${profile.Patronymic?.[0] || ''}`.trim(),
              firstName: profile.FirstName?.[0] || '',
              patronymic: profile.Patronymic?.[0] || '',
              lastName: profile.LastName?.[0] || '',
              birthDate: profile.BirthDate?.[0] || '',
              age: profile.Age?.[0] ? parseInt(profile.Age[0], 10) : 0,
              phone: phoneNumber
            }))
          }
        } catch (error) {
          console.error("üî¥ Check Auth: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:", error)
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        const response = {
          authenticated,
          phoneNumber,
          exists: authenticated,
          hasMultipleProfiles: profiles.length > 1,
          profiles
        }
        
        console.log("üü° Check Auth: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:", response)
        
        return NextResponse.json(response)
      } catch (soapError) {
        console.error("üî¥ Check Auth: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SOAP –∑–∞–ø—Ä–æ—Å–∞:", soapError)
        
        // –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å: –µ—Å–ª–∏ SOAP –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log("üü° Check Auth: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
        
        // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const mockResponse = {
          authenticated: true,
          phoneNumber: contactData.phoneNumber,
          exists: true,
          hasMultipleProfiles: true,
          profiles: [
            {
              id: "1",
              fullName: "–ê–Ω—Ç–æ–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π –Æ—Ä—å–µ–≤–∏—á",
              firstName: "–ê–ª–µ–∫—Å–µ–π",
              patronymic: "–Æ—Ä—å–µ–≤–∏—á",
              lastName: "–ê–Ω—Ç–æ–Ω–æ–≤",
              birthDate: "10/10/1988",
              age: 36,
              phone: contactData.phoneNumber,
            },
            {
              id: "2",
              fullName: "–ê–Ω—Ç–æ–Ω–æ–≤ –Æ—Ä–∏–π –ê–Ω–∞—Ç–æ–ª—å–µ–≤–∏—á",
              firstName: "–Æ—Ä–∏–π",
              patronymic: "–ê–Ω–∞—Ç–æ–ª—å–µ–≤–∏—á",
              lastName: "–ê–Ω—Ç–æ–Ω–æ–≤",
              birthDate: "12/03/1949",
              age: 76,
              phone: contactData.phoneNumber,
            },
          ],
        }
        
        return NextResponse.json(mockResponse)
      }
    } catch (error) {
      console.error("üî¥ Check Auth: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", error)
      return NextResponse.json({
        authenticated: false,
        error: "Failed to check phone number in MIS"
      }, { status: 502 })
    }
  } catch (error) {
    console.error("üî¥ Check Auth: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error)
    return NextResponse.json({ 
      error: "Internal server error" 
    }, { status: 500 })
  }
}

