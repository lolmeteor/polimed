import { NextResponse } from "next/server";

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–º
const PROXY_BASE_URL = "http://51.250.34.77:3001/proxy";
const MIS_GUID = process.env.MIS_GUID!;
const DEFAULT_LPU_ID = process.env.DEFAULT_LPU_ID!;

export async function POST(request: Request) {
  try {
    const data = await request.json();
    console.log("üü° Check Phone: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:", data);

    const { telegramId, phoneNumber } = data;

    if (!phoneNumber) {
      console.error("üî¥ Check Phone: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ");
      return NextResponse.json({ error: "Phone number is required" }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (!MIS_GUID || !DEFAULT_LPU_ID) {
      console.error("üî¥ Check Phone: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–ò–°");
      return NextResponse.json(
        { 
          error: "MIS configuration is not set" 
        }, 
        { status: 500 }
      );
    }

    try {
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: —É–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
      // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +7, —Ç–æ —É–±–∏—Ä–∞–µ–º +7, –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç
      let phoneFormatted = phoneNumber.replace(/\D/g, '');
      
      // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏ –∏–º–µ–µ—Ç 11 —Ü–∏—Ñ—Ä, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä
      if (phoneFormatted.length === 11 && phoneFormatted.startsWith('7')) {
        // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é 7
        phoneFormatted = phoneFormatted.substring(1);
      }
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø—Ä–æ–∫—Å–∏
      const requestData = {
        PhoneNumber: phoneFormatted,
        TelegramId: telegramId ? telegramId.toString() : "",
        Guid: MIS_GUID,
        DefaultLpuId: parseInt(DEFAULT_LPU_ID, 10)
      };

      console.log("üü° Check Phone: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–∫—Å–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:", requestData);
      
      try {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const checkPhoneUrl = `${PROXY_BASE_URL}/CheckPatient`;
        console.log("üü° Check Phone: URL –∑–∞–ø—Ä–æ—Å–∞:", checkPhoneUrl);
        
        const response = await fetch(checkPhoneUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestData),
        });

        if (!response.ok) {
          throw new Error(`–ü—Ä–æ–∫—Å–∏ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} ${response.statusText}`);
        }
        
        const result = await response.json();
        console.log("üü° Check Phone: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–∫—Å–∏:", result);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const authenticated = Boolean(result.authenticated);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        let profiles = result.profiles || [];
        
        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö
        if (Array.isArray(profiles) && profiles.length > 0 && !profiles[0].id) {
          profiles = profiles.map((profile: any) => ({
            id: profile.Id || '',
            fullName: `${profile.LastName || ''} ${profile.FirstName || ''} ${profile.Patronymic || ''}`.trim(),
            firstName: profile.FirstName || '',
            patronymic: profile.Patronymic || '',
            lastName: profile.LastName || '',
            birthDate: profile.BirthDate || '',
            age: profile.Age ? parseInt(profile.Age.toString(), 10) : 0,
            phone: phoneNumber
          }));
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        const clientResponse = {
          authenticated,
          phoneNumber,
          exists: authenticated,
          hasMultipleProfiles: profiles.length > 1,
          profiles
        };
        
        console.log("üü° Check Phone: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É:", clientResponse);
        
        return NextResponse.json(clientResponse);
      } catch (proxyError) {
        console.error("üî¥ Check Phone: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:", proxyError);
        
        // –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å: –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log("üü° Check Phone: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏");
        
        // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const mockResponse = {
          authenticated: true,
          phoneNumber,
          exists: true,
          hasMultipleProfiles: false,
          profiles: [
            {
              id: "1",
              fullName: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
              firstName: "–ò–≤–∞–Ω",
              lastName: "–ò–≤–∞–Ω–æ–≤",
              patronymic: "–ò–≤–∞–Ω–æ–≤–∏—á",
              birthDate: "10/10/1980",
              age: 43,
              phone: phoneNumber,
            },
          ],
        };
        
        return NextResponse.json(mockResponse);
      }
    } catch (error) {
      console.error("üî¥ Check Phone: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", error);
      return NextResponse.json({
        error: "Failed to check phone number in MIS"
      }, { status: 502 });
    }
  } catch (error) {
    console.error("üî¥ Check Phone: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
    return NextResponse.json({ 
      error: "Internal server error" 
    }, { status: 500 });
  }
}

